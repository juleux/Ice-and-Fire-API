swagger: '2.0'
schemes:
  - http
host: anapioficeandfire.com
basePath: 
info:
  version: 1.0.0
  title: API of Ice and Fire
  summary: All of the data you've ever wanted from the universe of Ice And Fire.

  x-logo:
    url: 'images/fire_and_ice_rev.jpg'
  description: |
    # Overview
    This documentation will help you familiarize yourself with the API and how to consume the different resources that are available. The documentation provides all information needed to get started and it also has educational examples for all resources.
    
    If you're interested in using a native implementation, please take a look at the [Libraries](#tag/libraries) section.
    
    # Authentication
    An API of Ice And Fire is an open API. This means that no authentication is required to query the API for data. Since no authentication is required, the API only supports the `GET` request method.
    
    # Caching
    To help our server and your client we provide a few ways for you to use caching. Each API response includes the [ETag-header](https://en.wikipedia.org/wiki/HTTP_ETag) and the Last-Modified header. These headers can be used to ask our server if the data has changed or not. If the data has not changed you will receive an empty response body with a [304 Not Modified](https://tools.ietf.org/html/rfc7232#section-4.1). If the data has changed you will receive a 200 with the updated data.
    
    #### To use the ETag, include the following header in your request:
    
    ```json
    If-None-Match: "your_etag_here"
    ```   
     #### To use Last-Modified, include the following header in your request:   
    ```json
    If-Modified-Since: "date_here"
    ```       
    We advise you to use the above mentioned caching strategies, this will increase the speed of your client as well as save us bandwidth.
    
    # Pagination
    An API of Ice And Fire provides a lot of data about the world of Westeros. To prevent our servers from getting cranky, the API will automatically paginate the responses. You will learn how to create requests with pagination parameters and consume the response.
    
    ### Things worth noting
    
    1. Information about the pagination is included in the [Link header](http://tools.ietf.org/html/rfc5988)
    2. Page numbering is 1-based
    3. You can specify how many items you want to receive per page, the maximum is 50
    
    ### Constructing a request with pagination
    
    You specify which page you want to access with the `?page` parameter, if you don't provide the `?page` parameter the first page will be returned. You can also specify the size of the page with the `?pageSize` parameter, if you don't provide the `?pageSize` parameter the default size of 10 will be used.
    
    Let's make a request for the first page of characters with a page size of 10. Since we're only interested in the pagination information we provide the `-I` parameter to say that we only care about the headers.
    
    ```json
    $ curl -I  "http://www.anapioficeandfire.com/api/characters?page=1&pageSize=10"
    ```
    #### Here's the link header in the response:
    ```json
    Link: <http://www.anapioficeandfire.com/api/characters?page=2&pageSize=10>; rel="next",
    <http://www.anapioficeandfire.com/api/characters?page=1&pageSize=10>; rel="first",  
    <http://www.anapioficeandfire.com/api/characters?page=214&pageSize=10>; rel="last"
    ```
    
    #### The possible values in the link response header are:
    
    | Name     | Description                              |
    | :------- |:-----------------------------------------|
    | next     | The link to the next page of results.    |
    | prev     | The link to the previous page of results.|
    | first    | The link to the first page of results.   |
    | last     | The link to the last page of results.    |
    
    These links can then be used to navigate to other pages of results.
    
    
    # Rate Limiting
    To prevent malicious usage of our API we've a limit on the number of requests a given IP address can make to the API. This limit is set to 20000 requests per day. There should be no reason for hitting the limit if you implement proper caching strategies in your client. If you happen to hit the limit you'll receive a [403 Forbidden](https://en.wikipedia.org/wiki/HTTP_403) on all your requests for the remainder of the 24 hour time period.
    
    

    # Versioning
    Custom media types are used in An API of Ice And Fire to let consumers choose which version of the data they wish to receive. This is done by adding the following type to the Accept header when you make a request. Note that media types are specific to resources, this allows them to change independently from each other.
    ###
    >**If a version is not specified in the request the default version will be used. The default version may change in the future and can thus break the consumer's application. Make sure to always request a specific version in the** `Accept` **header as shown in the example below.**
    ###
    You specify a version like so:
    ```json
    application/vnd.anapioficeandfire+json; version=1
    ```
#    # Libraries
#    There are a number of helper libraries you can use to consume the API of Ice and Fire.
#    ###
#    #### Elixir
#    * [maester](https://github.com/sotojuan/maester) by [Juan Soto](https://github.com/sotojuan)
#    #### GraphQL
#    * [iceandfire-graphql](https://github.com/afram/iceandfire-graphql) by [Marwan Butrous](https://github.com/afram)
#    #### Node
#    * [asoiaf-api](https://github.com/arbazsiddiqui/A-song-of-ice-and-fire-API) by [Arbaz Siddqiui](https://github.com/arbazsiddiqui)
#    * [node-api-iceandfire](https://github.com/alexwebb2/node-api-iceandfire) by Alex Webb
#    #### Python
#    * [anapioficeandfire-python](https://github.com/joakimskoog/anapioficeandfire-python) by the author of An API of Ice And Fire, [Joakim Skoog](https://github.com/joakimskoog)
#    #### Swift
#    * [IceAndFireKit](https://github.com/murphb52/IceAndFireKit) by [Brian Murphy](https://github.com/murphb52)
#    * [IceAndFireLoader](https://github.com/ujell/IceAndFireLoader) by [Yucel Uzun](https://github.com/ujell)
#    * [WesterosKit](https://github.com/fitomad/WesterosKit) by [Adolfo](https://github.com/fitomad)
    
#	 
tags:
  - name: API Root
    description: |
      ```json
      $ curl "http://www.anapioficeandfire.com/api"
      ```
  - name: books
    description: The API currently contains data on all five published novels in the *A Song of Ice and Fire*  © series.  It also references additional material in the form of novellas.  
  - name: characters
    description: The API contains information on 2000+ characters.
  - name: houses
    description: The API contains information on 400+ houses.
  - name: libraries
    description: |
      There are a number of helper libraries you can use to consume the API of Ice and Fire.
      ###
      #### Elixir
      * [maester](https://github.com/sotojuan/maester) by [Juan Soto](https://github.com/sotojuan)
      #### GraphQL
      * [iceandfire-graphql](https://github.com/afram/iceandfire-graphql) by [Marwan Butrous](https://github.com/afram)
      #### Node
      * [asoiaf-api](https://github.com/arbazsiddiqui/A-song-of-ice-and-fire-API) by [Arbaz Siddqiui](https://github.com/arbazsiddiqui)
      * [node-api-iceandfire](https://github.com/alexwebb2/node-api-iceandfire) by Alex Webb
      #### Python
      * [anapioficeandfire-python](https://github.com/joakimskoog/anapioficeandfire-python) by the author of An API of Ice And Fire, [Joakim Skoog](https://github.com/joakimskoog)
      #### Swift
      * [IceAndFireKit](https://github.com/murphb52/IceAndFireKit) by [Brian Murphy](https://github.com/murphb52)
      * [IceAndFireLoader](https://github.com/ujell/IceAndFireLoader) by [Yucel Uzun](https://github.com/ujell)
      * [WesterosKit](https://github.com/fitomad/WesterosKit) by [Adolfo](https://github.com/fitomad)
  - name: licensing & copyright
    description: |
      The *A Song of Ice and Fire* © series and its data is the property of George R.R. Martin. The data is used without claim of ownership.
      All data has been collected from free sources such as *A Wiki of Ice and Fire*.
      This project uses a BSD license.
  
paths:
  /api:
    get:
      tags:
        - API Root
      summary: Get links to API Resources
      description: Returns a url for each resource type (books, characters, houses) for use in a subsequent request.  
      operationId: getRoot
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/RootResponse'
        '400':
          description: Invalid status value
  /api/books:
    get:
      tags:
        - books
      summary: Get a list of books
      description: |
        Returns data for every book in the database.  Returns data for a subset of books when query parameters are included in the request.
        ###
        > By default, only the first ten books in the result set are returned.  To retrieve additional results, include `page` and `pageSize` query parameters in your request, for example: `?page=2&pageSize=10`.  Refer to [Pagination](#section/Pagination) for more information.
        ###
      operationId: getBooks
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          description: Returns books with the specified name.
          required: false
          type: string
        - name: fromReleaseDate
          in: query
          description: Returns books that were released after, or on, the specified date.
          required: false
          type: string
        - name: toReleaseDate
          in: query
          description: Returns books that were released on or before the specified date.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BooksResponse'
        '400':
          description: Invalid status value
  /api/books/{book-id}:
    parameters:
      - name: book-id
        in: path
        description: The id of the book being requested.
        type: integer
        required: true
    get:
      tags:
        - books
      summary: Get information about a specific book
      description: Returns data for the book with the specified book-id. 
      operationId: findBookById
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BooksResponse'
        '400':
          description: Invalid status value
  /api/characters:
    get:
      tags:
        - characters
      summary: Get a list of characters
      description: |
        Returns data for each character in the database.  Returns data for a subset of characters when query parameters are included in the request.
        ###
        > By default, only the first ten characters in the result set are returned.  To retrieve additional results, include `page` and `pageSize` query parameters in your request, for example: `?page=2&pageSize=10`.  Refer to [Pagination](#section/Pagination) for more information.
        ###
      operationId: getCharacters
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          description: Returns characters with the specified name.
          required: false
          type: string
        - name: gender
          in: query
          description: Returns characters with the specified gender.
          required: false
          type: string
        - name: culture
          in: query
          description: Returns characters with the specified culture.
          required: false
          type: string
        - name: born
          in: query
          description: Returns characters that were born within the specified year.
          required: false
          type: string
        - name: died
          in: query
          description: Returns characters that died within the specified year.
          required: false
          type: string
        - name: isAlive
          in: query
          description: Returns characters that remain alive.
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CharactersResponse'
        '400':
          description: Invalid status value
  /api/characters/{character-id}:
    parameters:
      - name: character-id
        in: path
        description: The id of the character being requested.
        type: integer
        required: true
    get:
      tags:
        - characters
      summary: Get information about a specific character
      description: Returns data for the character with the specified character-id.
      operationId: findCharacterById
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CharactersResponse'
        '400':
          description: Invalid status value
  /api/houses:
    get:
      tags:
        - houses
      summary: Get a list of houses
      description: |
        Returns data for each house in the database.  Returns data for a subset of houses when query parameters are included in the request.
        ###
        > By default, only the first ten houses in the result set are returned.  To retrieve additional results, include `page` and `pageSize` query parameters in your request, for example: `?page=2&pageSize=10`.  Refer to [Pagination](#section/Pagination) for more information.
        ###
      operationId: getHouses
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          description: Returns houses with the specified name.
          required: false
          type: string
        - name: region
          in: query
          description: Returns houses located within the specified region.
          required: false
          type: string
        - name: words
          in: query
          description: Returns houses with the specified words (complete motto).
          required: false
          type: string
        - name: hasWords
          in: query
          description: Returns houses that have a set of words associated with them.
          required: false
          type: boolean
        - name: hasTitle
          in: query
          description: Returns houses that have one or more titles associated with them.
          required: false
          type: boolean
        - name: hasSeats
          in: query
          description: Returns houses that have one or more seats associated with them.
          required: false
          type: boolean
        - name: hasDiedOut
          in: query
          description: Returns houses that have died out.
          required: false
          type: boolean
        - name: hasAncestralWeapons
          in: query
          description: Returns houses that have ancestral weapons associated with them.
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/HousesResponse'
        '400':
          description: Invalid status value
  /api/houses/{house-id}:
    parameters:
      - name: house-id
        in: path
        description: The id of the house being requested.
        type: integer
        required: true
    get:
      tags:
        - houses
      summary: Get information about a specific house
      description: Returns data for the house with the specified house-id.
      operationId: findHouseById
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/HousesResponse'
        '400':
          description: Invalid status value
definitions:
  RootResponse:
    type: object
    properties:
      books:
        type: string
        format: url
        description: endpoint for books resource
        example: http://www.anapioficeandfire.com/api/books
      characters:
        type: string
        format: url
        description: endpoint for characters resource
        example: http://www.anapioficeandfire.com/api/characters
      houses:
        type: string
        format: url
        description: endpoint for houses resource
        example: http://www.anapioficeandfire.com/api/houses
  BooksResponse:
    type: object
    properties:
      url:
        type: string
        format: url
        description: The hypermedia URL of this resource.
        example: http://www.anapioficeandfire.com/api/books/1
      name:
        type: string
        description: The name of this book.
        example: A Game of Thrones
      isbn:
        type: string
        format: 'ISBN-13'
        description: The International Standard Book Number (isbn) that uniquely identifies this book.
        example: 978-055310354
      authors:
        type: array
        items:
          type: string
        description: An array of names of the authors that wrote this book.
        example: "George R. R. Martin"  
      numberOfPages:
        type: integer
        description: The number of pages in this book.
        example: 694
      publisher:
        type: string
        description: The company that published this book.
        example: Bantam Books
      country:
        type: string
        description: The country which this book was published in.
        example: United States
      mediaType:
        type: string
        description: The type of media this book was released in. 
        enum:
          - Hardback
          - GraphicNovel
          - Paperback
        example: Hardcover
      released:
        type: string
        format: date-time
        description: The date, in ISO 8601 format, at which this book was released.
        example: '1996-08-01T00:00:00'
      characters:
        type: array
        items:
          type: string
          format: url
        description: An array resource URLs containing the characters from this book.
        example: [http://www.anapioficeandfire.com/api/characters/2, ...]
      povCharacters:
        type: array
        items:
          type: string
          format: url
        description: An array of Character resource URLs, one for each character that has a chapter within this book that is written from his/her point of view (POV).
        example: [http://www.anapioficeandfire.com/api/characters/148, ...]
  CharactersResponse:
    type: object
    properties:
      url:
        type: string
        format: url
        description: The hypermedia URL of this resource.
        example: http://www.anapioficeandfire.com/api/characters/823
      name:
        type: string
        description: The name of this character.
        example: Petyr Baelish
      gender:
        type: string
        description: The gender of this character. 
        enum:
          - Female
          - Male
          - Unknown
        example: Male
      culture:
        type: string
        description: The culture that this character belongs to.
        example: Valemen  
      born:
        type: string
        description: The year that this person was born.
        example: In 268 AC, at the Fingers
      died:
        type: string
        description: The year that this person died.
        example: ""
      titles:
        type: array
        items:
          type: string
        description: The titles that this character holds.
        example: [Master of coin (formerly),Lord Paramount of the Trident, Lord of Harrenhal, Lord Protector of the Vale]
      aliases:
        type: array
        items:
          type: string
        description: The aliases that this character goes by.
        example: [Littlefinger]
      father:
        type: string
        format: url
        description: The character resource URL of this character''s father.
        example: ""
      mother:
        type: string
        format: url
        description: The character resource URL of this character''s mother.
        example: ""
      spouse:
        type: string
        format: url
        description: The character resource URL of this character''s spouse.
        example: http://www.anapioficeandfire.com/api/characters/688
      allegiances:
        type: array
        items:
          type: string
          format: url
        description: An array of House resource URLs that this character is loyal to.
        example: [http://www.anapioficeandfire.com/api/houses/10, http://www.anapioficeandfire.com/api/houses/11]
      books:
        type: array
        items:
          type: string
          format: url
        description: An array of Book resource URLs that this character has been in.
        example: [http://www.anapioficeandfire.com/api/books/1, ...]
      povBooks:
        type: array
        items:
          type: string
          format: url
        description: An array of Book resource URLs that this character has had a POV-chapter in.
        example: []
      tvSeries:
        type: array
        items:
          type: string
        description: An array containing the names of Game of Thrones seasons that this character has appeared in.
        example: [Season 1, Season 2, Season 3, Season 4, Season 5]
      playedBy:
        type: array
        items:
          type: string
        description: An array containing the names of actors that have played this character in the TV show Game Of Thrones.
        example: [Aidan Gillen]
  HousesResponse:
    type: object
    properties:
      url:
        type: string
        format: url
        description: The hypermedia URL of this resource.
        example: http://www.anapioficeandfire.com/api/houses/10
      name:
        type: string
        description: The name of this house.
        example: House Baelish of Harrenhal
      region:
        type: string
        description: The region that this house resides in.
        example: The Riverland
      coatOfArms:
        type: string
        description: Text describing the coat of arms of this house.
        example: A field of silver mockingbirds, on a green field(Vert, semé of mockingbirds argent)  
      words:
        type: string
        description: The words of this house.
        example: ""
      titles:
        type: array
        items:
          type: string
        description: The titles that this house holds.
        example: [Lord Paramount of the Trident, Lord of Harrenhal]
      seats:
        type: array
        items:
          type: string
        description: The seats that this house holds.
        example: [Harrenhal]
      currentLord:
        type: string
        format: url
        description: The Character resource URL of this house''s current lord.
        example: http://www.anapioficeandfire.com/api/characters/823
      heir:
        type: string
        format: url
        description: The Character resource URL of this house''s heir.
        example: ""
      overlord:
        type: string
        format: url
        description: The House resource URL that this house answers to.
        example: http://www.anapioficeandfire.com/api/houses/16
      founded:
        type: string
        description: The year that this house was founded.
        example: 299 AC
      founder:
        type: string
        format: url
        description: The Character resource URL that founded this house.
        example:  http://www.anapioficeandfire.com/api/characters/823
      diedOut:
        type: string
        description: The year that this house died out.
        example: ""
      ancestralWeapons:
        type: array
        items:
          type: string
        description: An array of names of the noteworthy weapons that this house owns.
        example: []
      cadetBranches:
        type: array
        items:
          type: string
          format: url
        description: An array of House resource URLs that was founded from this house.
        example: []
      swornMembers:
        type: array
        items:
          type: string
          format: url
        description: An array of Character resource URLs that are sworn to this house.
        example: [http://www.anapioficeandfire.com/api/characters/651,   http://www.anapioficeandfire.com/api/characters/804, http://www.anapioficeandfire.com/api/characters/823, http://www.anapioficeandfire.com/api/characters/957, http://www.anapioficeandfire.com/api/characters/970]
#
